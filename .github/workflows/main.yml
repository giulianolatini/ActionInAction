name: myfirstpipeline
on: 
  push:
    branches: 
    - main
  workflow_dispatch:
    inputs:
      homedrive:
        description: 'The home drive on the machine'
        required: true
      logLevel:
        description: 'Log level'
        default: 'warning' 
        type: choice
        options:
        - info
        - warning
        - debug 
      tag:
        description: 'Apply tag after successfull test run'
        required: true 
        type: boolean 
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
jobs:
#  job_parallel:
#    strategy:
#      fail-fast: false
#      max-parallel: 3
#      matrix:
#        os_version: [macos-latest, ubuntu-latest]
#        node_version: [12, 14, 16]
#
#    name: My first job
#    runs-on: ${{ matrix.os_version }}
#    steps:
#      - uses: actions/setup-node@v3.6.0
#        with:
#          node-version: ${{ matrix.node_version }}
  main:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - uses: devops-actions/actionlint@v0.1.2
  
  myFirstJob:
    runs-on: ubuntu-latest
    env: 
      location: "World"
    steps:
      - run: echo "üëã Hello ${{ env.location }} "
    
      - name: Checkout
        uses: actions/checkout@v4.1.4
        
      - name: List files in repository
        run: |
          echo "The repository ${{ github.repository }} contains the following files:"
          tree
      - name: Error and Warning Test
        run: |
          echo "::warning file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
          echo "::error file=app.js,line=1,col=5,endColumn=7::Error in app.js"
          
      - name: Set color
        id: color-generator
        run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"
        
      - name: Get color
        run: echo "${{ steps.color-generator.outputs.SELECTED_COLOR }}"
            
      - id: sets-a-secret
        name: Generate, mask, and output a secret
        run: |
          the_secret=$((RANDOM))
          echo "::add-mask::$the_secret"
          echo "secret-number=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Use that secret output (protected by a mask)
        run: |
          echo "the secret number is ${{ steps.sets-a-secret.outputs.secret-number }}"
          
      - name: Set the value
        id: step_one
        run: |
          echo "action_state=yellow" >> "$GITHUB_ENV"
      - run: |
          echo "${{ env.action_state }}" # This will output 'yellow'

      - run: echo '### Hello world! :rocket:' >> $GITHUB_STEP_SUMMARY
      - run: echo '### Love this feature! :medal_sports:' >> $GITHUB_STEP_SUMMARY
      - run: echo '<h1>Great feature!</h1>' >> $GITHUB_STEP_SUMMARY

      - name: Write Summary from Action
        uses: actions/github-script@v6.1.0
        with:
          script: |
            await core.summary
            .addHeading('Test Results')
            .addTable([
              [{data: 'File', header: true}, {data: 'Result', header: true}],
              ['foo.js', 'Pass ‚úÖ'],
              ['bar.js', 'Fail ‚ùå'],
              ['test.js', 'Pass ‚úÖ']
            ])
            .addLink('View staging deployment!', 'https://github.com')
            .write()
        
  job_1:
    runs-on: ubuntu-latest
    steps:
      - name: display cuttent job
        run: "echo Job: ${{ github.job }}"
  job_2:
    runs-on: ubuntu-latest
    needs: job_1
    steps:
      - run: "echo Job: ${{ github.job }}"
  job_3:
    runs-on: ubuntu-latest
    needs: job_1
    steps:
      - run: "echo Job: ${{ github.job }}"
  job_4:
    runs-on: ubuntu-latest
    needs: [job_2, job_3]
    steps:
      - run: "echo Job: ${{ github.job }}"
